{"version":3,"sources":["components/Header.js","api/GetDataFromAPI.js","components/mainField/GetCompaniesIncome.js","components/mainField/Table.js","components/mainField/MainField.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","selectedOption","searchedPhrase","changeHandler","e","setState","target","value","inputHandler","headerSubmitHandler","preventDefault","props","whatToSearch","name","clearButtonHandler","className","onSubmit","this","onChange","type","onClick","Component","getDataFromAPI","dataType","fetch","then","resp","ok","json","Error","getCompaniesIncome","companies","a","companiesUpdate","urls","forEach","company","push","id","requests","map","url","Promise","all","incomes","income","index","total_income","countTotalIncome","average_income","countAverageIncome","last_month_income","countLastMonthIncome","totalIncome","i","length","parseFloat","toFixed","lastMonthIncomes","recentData","yearAndMonth","Number","date","substr","replace","filter","Table","page","pagesButtonHandler","num","getPages","numberOfPages","Math","floor","pages","getActualPageContent","data","actualPageData","actualCompany","createTableContent","city","key","prevProps","dataSort","el","MainField","companiesData","sortedBy","filteredData","loadAllCompaniesData","sort","b","companiesToSort","sorted","localeCompare","filterData","phrase","newFilteredData","element","String","includes","askType","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94d5310f.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n/**\n * A header for application, where you can filter your data\n */\nclass Header extends Component{\n\n    state = {\n        selectedOption: 'name',\n        searchedPhrase: ''\n    };\n    /**\n     * changes the chosen value in select, by which the data will be filtered\n     * @method\n     * @param {string} e event\n     */\n    changeHandler = (e) => {\n        this.setState({\n            selectedOption: e.target.value\n        })\n    };\n\n    /**\n     * changes the typed phrase in select, by which the data will be filtered\n     * @method\n     * @param {string} e event\n     */\n    inputHandler = (e) => {\n        this.setState({\n            searchedPhrase: e.target.value\n        })\n    };\n\n    /**\n     * method that is launched when handler is submitted, passes values to function in App component\n     * @method\n     * @param {string} e event\n     */\n    headerSubmitHandler = (e) => {\n        e.preventDefault();\n        this.props.whatToSearch(this.state.selectedOption, e.target.name.value);\n    };\n\n    /**\n     * function that sets searched phrase to an empty string\n     * @method\n     * @param {event} e event\n     */\n    clearButtonHandler = (e) => {\n        this.setState({\n            searchedPhrase: ''\n        })\n    };\n\n    render(){\n        return(\n            <header>\n                <h1>Companies table</h1>\n                <form className='flex-box' onSubmit={this.headerSubmitHandler}>\n                    <label> <span> Find the company by: </span>\n                        <select name=\"ko\" value={this.state.selectedOption} onChange={this.changeHandler}>\n                            <option value='name'>Name</option>\n                            <option value='id'>id</option>\n                            <option value='city'>City</option>\n                            <option value='total_income'>Total income</option>\n                            <option value='average_income'>Average income</option>\n                            <option value='last_month_income'>Last month income</option>\n                        </select>\n                        <input type=\"text\" name=\"name\" value={this.state.searchedPhrase} onChange={this.inputHandler} />\n                    </label>\n                    <input type=\"submit\" value=\"Search\"/>\n                    <button onClick={this.clearButtonHandler}>Clear</button>\n                </form>\n            </header>\n        )\n    }\n}\n\nexport default Header;","\n/**\n * function that gets data about companies from API\n * @function\n * @param {string} dataType specifies what data are we searching for\n * @return {Promise} if response is ok, returns promise object with data\n */\nconst getDataFromAPI = (dataType) => {\n    return fetch(`https://recruitment.hal.skygate.io/${dataType}`).then(resp => {\n        if (resp.ok)\n            return resp.json();\n        else {\n            throw new Error('Błąd sieci!');\n        }\n    });\n};\n\nexport default getDataFromAPI;","import getDataFromAPI from \"../../api/GetDataFromAPI\";\n\n/**\n * function that gets incomes from API for each company and counts total, average and last month income\n * @function\n * @param {array} companies an array of data about companies\n * @return {companies} an array with data about companies with added data about incomes for each company\n */\nconst getCompaniesIncome = async (companies) => {\n    let companiesUpdate = companies;\n    let urls = [];\n    companies.forEach( company=> {\n        urls.push(`incomes/${company.id}`);\n    });\n    let requests = urls.map(url => getDataFromAPI(url));\n    await Promise.all(requests)\n        .then(incomes => incomes.forEach(\n            (income, index) => {\n                companiesUpdate[index].total_income = countTotalIncome(income.incomes);\n                companiesUpdate[index].average_income = countAverageIncome(income.incomes);\n                companiesUpdate[index].last_month_income = countLastMonthIncome(income.incomes);\n            }\n        ));\n    return companiesUpdate;\n};\n\n/**\n * function that counts total income of one company\n * @function\n * @param {array} incomes an array of data about company incomes\n * @return {number} a total income\n */\nconst countTotalIncome = (incomes) => {\n    let totalIncome = 0;\n    for (let i = 0; i < incomes.length ; i++){\n        totalIncome += parseFloat(incomes[i].value);\n    }\n    return parseFloat(totalIncome.toFixed(2));\n};\n\n/**\n * function that counts average income of one company\n * @function\n * @param {array} incomes an array of data about company incomes\n * @return {number} an average income\n */\nconst countAverageIncome = (incomes) => {\n    return parseFloat((countTotalIncome(incomes)/incomes.length).toFixed(2));\n};\n\n/**\n * function that counts total income of one company from recent month\n * @function\n * @param {array} incomes an array of data about company incomes\n * @return {number} a total income from recent month\n */\nconst countLastMonthIncome = (incomes) => {\n    let lastMonthIncomes = [...incomes];\n    let recentData = 0;\n    lastMonthIncomes.forEach( income => {\n        let yearAndMonth = Number(income.date.substr(0,7).replace(\"-\", \"\"));\n        if(yearAndMonth > recentData){\n            recentData = yearAndMonth;\n        }\n    });\n    lastMonthIncomes = lastMonthIncomes.filter( income => {\n        return recentData === Number(income.date.substr(0,7).replace(\"-\", \"\"));\n    });\n    return countTotalIncome(lastMonthIncomes);\n};\n\nexport default getCompaniesIncome;","import React, {Component} from \"react\";\n\nconst COMPANIES_PER_PAGE = 50;\n\n/**\n * A component that creates Table\n */\nclass Table extends Component{\n\n    state = {\n        page: 1\n    };\n\n    /**\n     * method that changes the number of page, that is stored in state of component\n     * @method\n     * @param {string} e event\n     * @param {num} num number of page\n     */\n    pagesButtonHandler = (e, num) => {\n        this.setState({\n            page: num\n        });\n    };\n    /**\n     * method that counts number of pages and creates an array of number that equals number of pages\n     * @method\n     * @param {array} companies an array of data about companies\n     * @return {array} an array with page numbers\n     */\n    getPages = (companies) => {\n        let numberOfPages = (companies.length%COMPANIES_PER_PAGE===0) ? companies.length/COMPANIES_PER_PAGE :\n            (Math.floor(companies.length/COMPANIES_PER_PAGE))+1;\n        let pages = [];\n        if(numberOfPages>1) {\n            for (let i = 0; i < numberOfPages; i++) {\n                pages[i] = i + 1;\n            }\n        }\n        return pages;\n    };\n\n    /**\n     * method that gets complete array of companies and returns only those that will be shown on one page\n     * @method\n     * @param {array} data an array of data about companies\n     * @return {array} data about companies that will be shown on one page\n     */\n    getActualPageContent = (data) => {\n        const {page} = this.state;\n        let actualPageData = [];\n        for(let i=0; i<COMPANIES_PER_PAGE; i++){\n            let actualCompany = data[(COMPANIES_PER_PAGE*(page - 1))+i];\n            if(actualCompany){\n                actualPageData.push(actualCompany);\n            }\n        }\n        return actualPageData;\n    };\n\n    /**\n     * method that creates a JSX element - table rows with companies data\n     * @method\n     * @param {array} data an array of data about companies\n     * @return {JSX} table row with data\n     */\n    createTableContent = (data) => {\n        return data.map( company => {\n            const { id, name, city, total_income, average_income, last_month_income } = company;\n            return (\n                <tr key={id}>\n                    <td>{id}</td>\n                    <td>{name}</td>\n                    <td>{city}</td>\n                    <td>{total_income}</td>\n                    <td>{average_income}</td>\n                    <td>{last_month_income}</td>\n                </tr>\n            )\n        });\n    };\n\n    componentDidUpdate(prevProps) {\n        const {companies} = this.props;\n        if(companies !== prevProps.companies) {\n            this.setState({\n                page: 1\n            })\n        }\n    }\n\n    render() {\n        const {companies, dataSort} = this.props;\n        if (!this.props.companies) {\n            return (\n                <h1 id='data-loading'>Data loading ...</h1>\n            )\n        }\n        else {\n            return (\n                <section className=\"mainTable flex-box\">\n                    <table id=\"companies\">\n                        <thead>\n                        <tr>\n                            <th onClick={e => dataSort(e, 'id')}>id</th>\n                            <th onClick={e => dataSort(e, 'name')}>Name</th>\n                            <th onClick={e => dataSort(e, 'city')}>City</th>\n                            <th onClick={e => dataSort(e, 'total_income')}>Total income</th>\n                            <th onClick={e => dataSort(e, 'average_income')}>Average income</th>\n                            <th onClick={e => dataSort(e, 'last_month_income')}>Last month income</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                            {this.createTableContent(this.getActualPageContent(companies))}\n                        </tbody>\n                    </table>\n                    <div className='pageNumbers'>\n                        {this.getPages(companies).map(el => <button key={el} onClick={e => this.pagesButtonHandler(e, el)} className={ this.state.page === el ? 'activeButton': '' }>{el}</button>)}\n                    </div>\n                </section>\n            )\n        }\n    }\n}\n\nexport default Table;","import React, {Component} from \"react\";\nimport getDataFromAPI from '../../api/GetDataFromAPI';\nimport getCompaniesIncome from './GetCompaniesIncome';\nimport Table from \"./Table\";\n\n/**\n * A component that launches all the main functions, like getting data from API and counting incomes and gives them to\n * component that creates Table\n */\nclass MainField extends Component{\n\n    state = {\n        companiesData: null,\n        sortedBy: null,\n        filteredData: null\n    };\n\n    /**\n     * launches the functions that gets data from API and calculate incomes and passes it to the state\n     * @method\n     */\n    loadAllCompaniesData = () => {\n        getDataFromAPI('companies').then(companies => {\n            companies.sort((a, b) => {\n                return a.id - b.id;\n            });\n            getCompaniesIncome(companies).then(companies => {\n                this.setState({\n                    companiesData: companies,\n                    sortedBy: 'id',\n                    filteredData: companies\n                });\n            });\n        })\n    };\n\n    /**\n     * sorts the data by chosen value and saves the filtered data in state\n     * @method\n     * @param {event} e event\n     * @param {string} dataType type of data by which the data is sorted\n     */\n    dataSort = (e, dataType) => {\n        const companiesToSort = [...this.state.filteredData];\n        let sorted = this.state.sortedBy;\n        if(dataType==='name' || dataType==='city'){\n            if(sorted === dataType){\n                companiesToSort.sort((a, b) => {\n                    return b[`${dataType}`].localeCompare(a[`${dataType}`]);\n                });\n                sorted = \"-\"+dataType;\n            }\n            else{\n                companiesToSort.sort((a, b) => {\n                    return a[`${dataType}`].localeCompare(b[`${dataType}`]);\n                });\n                sorted = dataType;\n            }\n        }\n        else {\n            if(sorted === dataType){\n                companiesToSort.sort((a, b) => {\n                    return b[`${dataType}`] - a[`${dataType}`];\n                });\n                sorted = \"-\"+dataType;\n            }\n            else{\n                companiesToSort.sort((a, b) => {\n                    return a[`${dataType}`] - b[`${dataType}`];\n                });\n                sorted = dataType;\n            }\n        }\n        this.setState({\n            filteredData: companiesToSort,\n            sortedBy: sorted\n        });\n    };\n\n    /**\n     * filters the data by chosen value and phrase that is passed in props and saves the filtered data in state\n     * @method\n     * @param {string} phrase a phrase by which data is filtered\n     * @param {string} dataType type of data by which the data is sorted\n     */\n    filterData = (phrase, dataType) => {\n        let newFilteredData = [...this.state.companiesData];\n        if(phrase) {\n            newFilteredData = newFilteredData.filter((element) => {\n                return String(element[`${dataType}`]).includes(phrase);\n            });\n        }\n        this.setState({\n           filteredData: newFilteredData\n        });\n    };\n\n    componentDidMount() {\n        this.loadAllCompaniesData();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {searchedPhrase, askType} = this.props;\n        if(searchedPhrase !== prevProps.searchedPhrase || askType !== prevProps.askType){\n            this.filterData(searchedPhrase, askType);\n        }\n    }\n\n    render() {\n        return <Table companies={this.state.filteredData} dataSort={this.dataSort}/>\n    }\n}\n\nexport default MainField;\n","import React from 'react';\n\n/**\n * A footer of application with basic data and link to repository with this project\n */\nfunction Footer() {\n    return (\n        <footer className='flex-box'>\n            <p>Created by: Piotr Talaga</p>\n            <p>Repository avaliable at <a href='https://github.com/piotrtalaga/table-of-companies'>Github</a></p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport './App.css';\nimport './scss/main.scss';\nimport Header from \"./components/Header\";\nimport MainField from \"./components/mainField/MainField\";\nimport Footer from \"./components/Footer\";\n\n/**\n* Main component of application, renders all the components\n*/\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      askType: 'name',\n      searchedPhrase: ''\n    }\n  };\n\n  /**\n   * function that changes state of component\n   * @method\n   * @param {string} askType the value by which the data will be filtered\n   * @param {string} phrase phrase by which the data will be filtered\n   */\n  whatToSearch = (askType, phrase) => {\n    this.setState({\n      askType: askType,\n      searchedPhrase: phrase\n    });\n  };\n\n  render() {\n    return (\n        <>\n          <Header whatToSearch={this.whatToSearch}/>\n          <MainField askType={this.state.askType} searchedPhrase={this.state.searchedPhrase}/>\n          <Footer/>\n        </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}